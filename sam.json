{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Exported by architect/package@1.0.30 on 2019-07-04T20:09:22.257Z",
  "Resources": {
    "ArcCodes": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
        "StageName": "production",
        "DefinitionBody": {
          "openapi": "3.0.1",
          "info": {
            "title": "arc-codes"
          },
          "paths": {
            "/": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/api/{version}/package": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApiVersionPackage.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "parameters": [
                  {
                    "name": "proxy",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "cacheNamespace": "xlr8r",
                  "cacheKeyParameters": [
                    "method.request.path.proxy"
                  ],
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/_static/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "parameters": [
                  {
                    "name": "proxy",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": [
                      "http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}",
                      {
                        "bukkit": {
                          "Ref": "StaticBucket"
                        }
                      }
                    ]
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "requestParameters": {
                    "integration.request.path.proxy": "method.request.path.proxy"
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "ANY",
                  "cacheNamespace": "xlr8r2",
                  "cacheKeyParameters": [
                    "method.request.path.proxy"
                  ],
                  "type": "http_proxy"
                }
              }
            },
            "/index.css": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Content-Type": {
                        "schema": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Content-Type": "'text/css; charset=utf8'"
                      },
                      "responseTemplates": {
                        "text/html": "*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nhtml, body {\n  display: flex;\n  justify-content: left;\n}\n\nbody {\n  box-sizing: border-box;\n  margin: 0;\n  font-family: 'Open Sans', sans-serif;\n  color: #333333;\n  line-height: 1.5em;\n  font-size: 16px;\n  overflow-x: hidden;\n}\n\na {\n  color: #16c2ff;\n  text-decoration: none;\n}\n\na:hover {\n  color: #00afee;\n  text-decoration: none;\n}\n\n.ir {\n  font: 0/0 a;\n  text-shadow: none;\n  color: transparent;\n}\n\n.logo {\n  max-width: 100%;\n  margin: 0;\n  padding: 0;\n  display: block;\n}\n\n.logo a {\n  display: block;\n  height: 100%;\n  width: 100%;\n}\n\n.logo svg {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.content .logo {\n  max-width: 300px;\n}\n\n#nav-logo-main {\n  margin: 25px auto 0px auto;\n}\n\n.nav .logo {\n  height: 45px;\n  width: 80%;\n  margin: 30px auto;\n}\n\n.nav.home {\n  padding-top: 80px;\n}\n\n.nav.home .logo {\n  display: none;\n}\n\n.main {\n  position: relative;\n  margin: 0 auto;\n  min-height: 100vh;\n  min-width: 600px;\n}\n\na code {\n  color: #16c2ff;\n  text-decoration: none;\n}\n\na:hover code {\n  color: #00afee;\n  text-decoration: none;\n}\n\n@media (max-width: 600px) {\n  .main {\n    min-width: 300px;\n  }\n  a {\n    line-height: initial;\n  }\n  a code {\n    line-height: initial;\n  }\n  .nav ul li a {\n    line-height: 1.5em;\n  }\n}\n\ncode.language-bash,\ncode.language-ini,\ncode.language-arc,\ncode.language-javascript {\n  font-size:smaller;\n}\n\ncode {\n  font-size: 1em;\n  line-height: 1em;\n  /*background: rgba(255,255,255,0.5);*/\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 4px;\n  padding-right: 4px;\n  color: #00c26e;\n  border-radius: 5px;\n}\n\npre code {\n  display: block;\n  padding: 20px;\n  opacity: 1;\n  overflow: auto;\n}\n\n.cloud {\n  font-size: 2.4em;\n}\n\nblockquote {\n  padding: 0 1em;\n  color: #6a737d;\n  border-left: 0.25em solid #ccc;\n  margin: 0;\n}\n\nhr {\n  border: 1px dotted #eaeaea;\n  width: 80%;\n  margin-top: 30px;\n  margin-bottom: 30px;\n}\n\n.nav {\n  width: 270px;\n  background: black;\n  color:white;\n  position: fixed;\n  overflow: auto;\n  height: 100%;\n}\n\nh1, h2, h3 {\n  font-weight: 300;\n  line-height: 1em;\n}\n\nh2 {\n  margin-top: 30px;\n  line-height: 1.5em;\n}\n\nul li {\n  line-height: 1.5em;\n}\n\n.nav ul {\n  margin-top: 10px;\n  margin-right: 10px;\n  margin-bottom: 0;\n  margin-left: 10px;\n  padding-top: 10px;\n  padding-right: 0;\n  padding-bottom: 0;\n  padding-left: 0;\n}\n\n.nav ul ul {\n  margin:0px;\n}\n\n.nav ul li {\n  color: rgba(255,255,255,0.5);\n  list-style: none;\n  margin-left: 15px;\n  padding-bottom: 5px;\n  line-height: 1.5em;\n}\n\n.nav ul ul li {\n  list-style: none;\n  margin-left: 20px;\n}\n\n.nav ul ul li:last-child {\n  margin-bottom: 10px;\n}\n\n.nav ul a {\n  font-weight: bold;\n  text-decoration: none;\n  width: 100%;\n  display: block;\n  color: white;\n  padding-bottom: 5px;\n}\n\n.nav ul ul a {\n  font-weight: normal;\n}\n\nnav ul li code,\nnav ul li ul li a code {\n  background: none;\n  padding: 0;\n  border: none;\n  color: white;\n}\n\nnav ul li code {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n\n.nav ul a:hover {\n  color: #00afee;\n}\n\n.nav-toggle {\n  width: 44px;\n  height: 44px;\n  display: none;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: none;\n  border: none;\n}\n\n.nav-toggle:active,\n.nav-toggle:focus {\n  outline: none;\n}\n\n.nav-toggle span,\n.nav-toggle:before,\n.nav-toggle:after {\n  content: '';\n  width: 30px;\n  height: 3px;\n  background: white;\n}\n\n.nav-open .nav-toggle span {\n  display: none;\n}\n\n.nav-open .nav-toggle:before {\n  transform: rotate(45deg);\n}\n\n.nav-open .nav-toggle:after {\n  transform: rotate(-45deg) translate(2px, -3px);\n}\n\n.nav-toggle span {\n  margin: 8px 0;\n}\n\n.content {\n  /*background: #eaeaea;*/\n  padding: 40px 40px 40px 340px;\n  width: 100%;\n  min-height: 100vh;\n}\n\n.inner {\n  max-width: 750px;\n}\n\nsection>section h1 {\n  font-size: 3em;\n  margin-top: 20px;\n  margin-bottom: 40px;\n}\n\n.github-corner {\n  fill:#333333;\n  color: #ffffff;\n  position: fixed;\n  top: 0;\n  border: 0;\n  right: 0;\n}\n\na.github-corner:hover {\n  color: #ffffff;\n}\n\ntable {\n  font-size: 1rem;\n}\n\ntd {\n  vertical-align: top;\n  padding-bottom: 1rem;\n}\n\ntd:first-child {\n  padding-top: 4px;\n}\n\nth:last-child, td:last-child {\n  padding-left: 1rem;\n}\n\nth {\n  text-align: left;\n}\n\n@media (max-width: 600px) {\n  \n  .github-corner {\n    display: none;\n  }\n\n  .content {\n    padding: 20px;\n  }\n\n  .nav {\n    width: 100%;\n    position: relative;\n    height: 80px;\n    overflow: hidden;\n    padding-top: 10px !important;\n  }\n\n  #nav-logo-main {\n    margin: 10px auto 0px 20px;\n  }\n\n  .nav .logo {\n    display: block !important;\n    padding-right: 40px;\n    max-width: 250px;\n  }\n\n  .home .content .logo {\n    display: none;\n  }\n\n  .nav-toggle {\n    display: flex;\n  }\n\n  .nav-open .nav {\n    height: auto;\n  }\n\n}\n\n\n/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript */\n/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n  color: black;\n  background: none;\n  text-shadow: 0 1px white;\n  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n\n  -webkit-hyphens: none;\n  -moz-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n\n@media print {\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    text-shadow: none;\n  }\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n  padding: 1em;\n  margin: .5em 0 1.5em 0;\n  overflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n  background: #f5f2f0;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n  padding: .1em;\n  border-radius: .3em;\n  white-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: slategray;\n}\n\n.token.punctuation {\n  color: #999;\n}\n\n.namespace {\n  opacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: #a67f59;\n  background: hsla(0, 0%, 100%, .5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #07a;\n}\n\n.token.function {\n  color: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #e90;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n\npre.language-arc code.language-arc,\npre.language-bash code.language-bash {\n  background:black;\n  color:cyan;\n  font-size: 1.3em;\n  text-shadow:none;\n}\n"
                      },
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "contentHandling": "CONVERT_TO_TEXT",
                  "passthroughBehavior": "when_no_match",
                  "type": "mock"
                }
              }
            },
            "/intro/playground.js": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Content-Type": {
                        "schema": {
                          "type": "string"
                        }
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Content-Type": "'application/javascript; charset=utf8'"
                      },
                      "responseTemplates": {
                        "text/html": "/* eslint-env browser */\nasync function render() {\n  let arc = document.querySelector('form textarea').value\n  let base = window.location.pathname.startsWith('/production')? '/production' : ''\n  let url = base + '/api/1/package?arc=' + encodeURIComponent(arc)\n  let result = await fetch(url)\n  let json = await result.json()\n  let fun = r=> json.Resources[r].Type === 'AWS::Serverless::Function'\n  let code = r=> json.Resources[r].Properties.CodeUri\n  let sources = Object.keys(json.Resources).filter(fun).map(code)\n  let preview = document.querySelector('div#preview')\n  preview.innerHTML = '<pre>' + JSON.stringify(json, null, 2) + '</pre>'\n  let tree = document.querySelector('div#tree')\n  tree.innerHTML = sources.join('<br>')\n}\n\nfunction main() {\n  //let form = document.querySelector('form')\n  let button = document.querySelector('form button')\n  let textarea = document.querySelector('form textarea')\n\n  button.remove()\n  textarea.addEventListener('input', render)\n  render()\n}\n\ndocument.addEventListener('DOMContentLoaded', main)\n"
                      },
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "contentHandling": "CONVERT_TO_TEXT",
                  "passthroughBehavior": "when_no_match",
                  "type": "mock"
                }
              }
            }
          }
        },
        "EndpointConfiguration": "REGIONAL",
        "BinaryMediaTypes": [
          "*~1*"
        ],
        "MinimumCompressionSize": 0
      }
    },
    "GetIndex": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-index",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "arc-codes",
            "NODE_ENV": "production",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetIndexEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/",
              "Method": "GET",
              "RestApiId": {
                "Ref": "ArcCodes"
              }
            }
          }
        }
      }
    },
    "GetApiVersionPackage": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-api-000version-package",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "arc-codes",
            "NODE_ENV": "production",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetApiVersionPackageEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/api/{version}/package",
              "Method": "GET",
              "RestApiId": {
                "Ref": "ArcCodes"
              }
            }
          }
        }
      }
    },
    "InvokeProxyPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIndex"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/*",
            {
              "restApiId": {
                "Ref": "ArcCodes"
              }
            }
          ]
        }
      }
    },
    "StaticBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "404.html"
        }
      }
    },
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ArcGlobalPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "ArcStaticBucketPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:s3:::${bukkit}",
                      {
                        "bukkit": {
                          "Ref": "StaticBucket"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "RoleReflectionPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcRoleReflectionPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:GetRolePolicy",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:iam::${AWS::AccountId}:role/${role}",
                  {
                    "role": {
                      "Ref": "Role"
                    }
                  }
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "StaticBucketParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/static/${key}",
            {
              "key": "bucket"
            }
          ]
        },
        "Value": {
          "Ref": "StaticBucket"
        }
      }
    },
    "StaticFingerprintParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/static/${key}",
            {
              "key": "fingerprint"
            }
          ]
        },
        "Value": "false"
      }
    },
    "ParameterStorePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcParameterStorePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "ssm:GetParametersByPath",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}",
                  {}
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    }
  },
  "Outputs": {
    "API": {
      "Description": "API Gateway",
      "Value": {
        "Fn::Sub": [
          "https://${restApiId}.execute-api.${AWS::Region}.amazonaws.com/production/",
          {
            "restApiId": {
              "Ref": "ArcCodes"
            }
          }
        ]
      }
    },
    "restApiId": {
      "Description": "HTTP restApiId",
      "Value": {
        "Ref": "ArcCodes"
      }
    },
    "BucketURL": {
      "Description": "Bucket URL",
      "Value": {
        "Fn::Sub": [
          "http://${bukkit}.s3.${AWS::Region}.amazonaws.com",
          {
            "bukkit": {
              "Ref": "StaticBucket"
            }
          }
        ]
      }
    }
  }
}